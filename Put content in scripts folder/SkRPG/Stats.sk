#
#This file enables the statistics to function. You can add your own here or use your own .sk files.
#Wisdom stat part is located in plugins/Skript/scripts/SkRPG/!SkRPG.sk within the mana section
#Another part of Vitality is located in plugins/Skript/scripts/SkRPG/!SkRPG.sk within the health regen section (works if custom-health-regen is true in configs)

#Strength
on damage:
    damage cause is attack or projectile
    set {_stat} to skRPGgetGlobalStatAmount(attacker, "strength")
    add {_stat} to damage

#Defense
on damage:
    set {_stat} to skRPGgetGlobalStatAmount(victim, "defense")
    remove {_stat} from damage

#Speed
#This is a custom event from SkRPG which is called everytime
#stats are updated on a player. This is needed to update
#the walk speed of the player instantly
on skrpg update stat:
    event-string is "speed"
    set {_stat} to skRPGgetGlobalStatAmount(player, "speed")
    #This is the base walkspeed in Minecraft
    set {_basewalkspeed} to 0.2
    #We add the stat on the base walk speed
    add {_stat}/100 to {_basewalkspeed}
    #Checking if updating the walk speed of player is needed.
    if {_basewalkspeed} is not equal to walk speed of player:
        set walk speed of player to {_basewalkspeed}

#Vitality
on heal:
    set {_stat} to skRPGgetGlobalStatAmount(player, "vitality")
    add {_stat} to heal amount

#Lifesteal
on damage:
    event is not cancelled
    set {_stat} to skRPGgetGlobalStatAmount(attacker, "lifesteal")
    chance of {_stat}%:
        set {_heal} to damage/3
        heal attacker by {_heal}
        send "<##f60e57>💔 &c+%{_heal}% HP <##f60e57>from lifesteal !" to attacker

#Dodge
on damage:
    attacker is set
    set {_stat} to skRPGgetGlobalStatAmount(victim, "dodge")
    chance of {_stat}%:
        set damage to 0
        send "<##c2d1ce>💨 You dodged the attack !" to victim

#Crit chance & Crit damage
on damage:
    event is not cancelled
    set {_stat} to skRPGgetGlobalStatAmount(victim, "crit_chance")
    chance of {_stat}%:
        set {_crit-damage} to skRPGgetGlobalStatAmount(victim, "crit_damage")
        add {_crit-damage} to damage

#Health:
on skrpg update stat:
    event-string is "health"
    set {_stat} to skRPGgetGlobalStatAmount(player, "health")
    set {_stat} to {_stat}*2
    set health scale of event-player to 20
    set player's max health attribute to {_stat}

#Mining fortune
on break of any ore:
    set {_stat} to skRPGgetGlobalStatAmount(player, "mining_fortune")
    chance of {_stat}%:
        set {_loots::*} to drops of event-block
        drop {_loots::*} at event-location

#Foraging fortune
on break of any log:
    set {_stat} to skRPGgetGlobalStatAmount(player, "foraging_fortune")
    chance of {_stat}%:
        set {_loots::*} to drops of event-block
        drop {_loots::*} at event-location

#Farming fortune
on break:
    if max age of block > 0:
        age of block = max age of block
        set {_stat} to skRPGgetGlobalStatAmount(player, "farming_fortune")
        chance of {_stat}%:
            set {_loots::*} to drops of event-block
            drop {_loots::*} at event-location            
on break of pumpkin or melon:
    set {_stat} to skRPGgetGlobalStatAmount(player, "farming_fortune")
    chance of {_stat}%:
        set {_loots::*} to drops of event-block
        drop {_loots::*} at event-location

#Exemple of breaking power
#You change the blocks by wathever you want
on block damage:
    gamemode of player is survival
    set {_stat} to skRPGgetGlobalStatAmount(player, "breaking_power")
    #Obsidian needs breaking power 3 to be broken
    if event-block is obsidian:
        if {_stat} < 3:
            cancel event
            send "&c⛏ You need a pickaxe with <##0c5527>Breaking power 3 &cor more to break this block!" to player

#True damage
#Reduce healh of victim without taking in count armor, potion effects...
on damage:
    event is not cancelled
    damage cause is attack or projectile
    attacker is set
    event is not cancelled
    set {_stat} to skRPGgetGlobalStatAmount(attacker, "true_damage")
    reduce health of victim by {_stat} 
